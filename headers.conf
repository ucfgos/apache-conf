# Layer of security that helps to detect and mitigate certain types of attacks
# 
# form-action: Restricts the URLs which can be used as the target of a form submissions from a given context.
# base-uri: Restricts the URLs which can be used in a document's <base> element.
# font-src: Specifies valid sources for fonts loaded using @font-face
# frame-ancestors: Specifies valid parents that may embed a page using <frame>, <iframe>, <object>, <embed>, or <applet>.
# img-src: Specifies valid sources of images and favicons.
# object-src: Specifies valid sources for the <object>, <embed>, and <applet> elements.
# script-src: Specifies valid sources for JavaScript.
# script-src-attr: Specifies valid sources for JavaScript inline event handlers.
# style-src: Specifies valid sources for stylesheets.
# upgrade-insecure-requests: Instructs user agents to treat all of a site's insecure URLs (those served over HTTP) as though they have been replaced with secure URLs (those served over HTTPS). This directive is intended for websites with large numbers of insecure legacy URLs that need to be rewritten.
# default-src: Serves as a fallback for the other fetch directives.
Header set Content-Security-Policy: "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"

# Response header prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
# 
# valid options are: unsafe-none | require-corp
Header set Cross-Origin-Embedder-Policy: require-corp

# Response header allows you to ensure a top-level document does not share a browsing context group with cross-origin documents.
# COOP will process-isolate your document and potential attackers can't access your global object if they were to open it in a popup, preventing a set of cross-origin attacks dubbed XS-Leaks
# 
# valid options are: unsafe-none | same-origin-allow-popups | same-origin
Header set Cross-Origin-Opener-Policy: same-origin

# Policy that lets web sites and applications opt in to protection against certain requests from other origins (such as those issued with elements like <script> and <img>)
# 
# valid options are: same-site | same-origin | cross-origin
Header set Cross-Origin-Resource-Policy: same-origin

# HTTP response header that instructs the browser to prevent synchronous scripting access between same-site cross-origin pages. Browsers may also use Origin-Agent-Cluster as a hint that your origin should get its own, separate resources, such as a dedicated process.
# 
# The value of ?1 is the structured header syntax for a boolean true value.
Header set Origin-Agent-Cluster: ?1

# Controls how much referrer information (sent with the Referer header) should be included with requests. Aside from the HTTP header, you can set this policy in HTML.
# 
# valid options are: no-referrer | no-referrer-when-downgrade | origin | origin-when-cross-origin | same-origin | strict-origin | strict-origin-when-cross-origin | unsafe-url
Header set Referrer-Policy: no-referrer

# Informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS.
# 
# valid options are: max-age=<expire-time> | max-age=<expire-time>; includeSubDomains | max-age=<expire-time>; preload
Header set Strict-Transport-Security: "max-age=15552000; includeSubDomains"

# Marker used by the server to indicate that the MIME types advertised in the Content-Type headers should be followed and not be changed. The header allows you to avoid MIME type sniffing by saying that the MIME types are deliberately configured.
# 
# valid options are: nosniff 
Header set X-Content-Type-Options: nosniff

# Controls DNS prefetching, a feature by which browsers proactively perform domain name resolution on both links that the user may choose to follow as well as URLs for items referenced by the document, including images, CSS, JavaScript, and so forth.
# 
# valid options are: on | off
Header set X-DNS-Prefetch-Control: off

# This headcer is specific to IE 8, and is related to how IE 8 handles downloaded HTML files. Turns out if you download an HTML file from a web page and chooses to "Open" it in IE, it will execute in the context of the web site. That means that any scripts in that file will also execute with the origin of the web site.
# 
# valid options are: noopen
Header set X-Download-Options: noopen

# Response header that can be used to indicate whether or not a browser should be allowed to render a page in a <frame>, <iframe>, <embed> or <object>. Sites can use this to avoid click-jacking attacks, by ensuring that their content is not embedded into other sites.
# 
# valid options are: DENY | SAMEORIGIN
Header set X-Frame-Options: SAMEORIGIN

# Header used to permit cross-domain requests from Flash and PDF documents. In most cases, these permissions are defined in an XML document called crossdomain.xml found in the root directory of the web page. For situations in which the root directory cannot be specified, however, this header can be used to define a desired meta policy
Header set X-Permitted-Cross-Domain-Policies: none

# Feature of Internet Explorer, Chrome and Safari that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. These protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript ('unsafe-inline').
# 
# valid options are: 0 | 1 | 1; mode=block | report=<reporting-uri>
Header set X-XSS-Protection: 0